---
name: Docker Build Action
on:
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Lint
        uses: golangci/golangci-lint-action@v7
        with:
          args: --build-tags integration -D protogetter --timeout=5m

      - name: Test
        run: |
          make test

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os:
          - linux
          - windows
          - darwin
        arch:
          - amd64
          - arm64
        exclude:
          - os: linux
            arch: arm64
          - os: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Make tag
        run: |
          [ "${GITHUB_EVENT_NAME}" == 'pull_request' ] && echo "TAG_NAME=$(echo $GITHUB_REF | awk -F / '{print $3}')-${GITHUB_HEAD_REF##*/}" >> $GITHUB_ENV || true
          [ "${GITHUB_EVENT_NAME}" == 'release' ] && echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV || true
          [ "${GITHUB_EVENT_NAME}" == 'push' ] && echo "TAG_NAME=latest" >> $GITHUB_ENV || true

          [ "${GITHUB_EVENT_NAME}" == 'pull_request' ] && echo "TARGET_BINARY_LOCATION=pull-requests/$(echo $GITHUB_REF | awk -F / '{print $3}')-${GITHUB_HEAD_REF##*/}" >> $GITHUB_ENV || true
          [ "${GITHUB_EVENT_NAME}" == 'release' ] && echo "TARGET_BINARY_LOCATION=${GITHUB_REF##*/}" >> $GITHUB_ENV || true
          [ "${GITHUB_EVENT_NAME}" == 'push' ] && echo "TARGET_BINARY_LOCATION=latest" >> $GITHUB_ENV || true

      - name: Build
        run: |
          make cli GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }}

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
        if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          sbom: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
        if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        env:
          SBOM_NAME: sbom-${{ matrix.os }}-${{ matrix.arch }}.json
        with:
          path: ./bin/
          format: spdx-json
          artifact-name: ${{ env.SBOM_NAME }}
          output-file: ./bin/${{ env.SBOM_NAME }}

      - name: Prepare upload
        run: |
          mkdir -p metal/${TARGET_BINARY_LOCATION}
          sudo chown -R $(id -u):$(id -g) bin
          cp bin/* metal/${TARGET_BINARY_LOCATION}/

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            bin/metal-*
            bin/sbom-*.json
        if: ${{ github.event_name == 'release' }}
